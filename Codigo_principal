// codigo final do arduino para a estacao meteorologica

// Inclusão de bibliotecas:
#include "DHT.h"
#include <Wire.h> // biblioteca para comunicacao I²C
#include <LiquidCrystal_I2C.h> // biblioteca do LCD com I²C
#include <SPI.h>
#include <Adafruit_BMP280.h>

// Criação de elementos:
// LCD
LiquidCrystal_I2C lcd(0x27,16,2); // endereço LCD I²C e qtde colunas e linhas
// DHT-22
#define DHTPIN 3 // O pino onde o DHT vai estar conectado
#define DHTTYPE DHT22 // DHT 22 (AM2302)
DHT dht(DHTPIN, DHTTYPE); // Criação do DHT
// BMP-280
#define BMP_SCK  (13)
#define BMP_MISO (12)
#define BMP_MOSI (11)
#define BMP_CS   (10)
Adafruit_BMP280 bmp; // I2C
//Adafruit_BMP280 bmp(BMP_CS); // hardware SPI
//Adafruit_BMP280 bmp(BMP_CS, BMP_MOSI, BMP_MISO,  BMP_SCK);
// TMP-36
int sensorValue = 0;
float volts;
float celsius;
// Sensor Luminosidade
int sensorValue2; double tensao, res, lum;


void setup() {
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  Serial.begin(9600); // inicializa serial
  analogReference(INTERNAL); // Fundo escala 1,1V
  dht.begin();
  lcd.init(); // inicializa LCD
  lcd.backlight();
  while ( !Serial ) delay(100);   // wait for native usb
  //Serial.println(F("BMP280 test"));
  unsigned status;
  //status = bmp.begin(BMP280_ADDRESS_ALT, BMP280_CHIPID);
  status = bmp.begin(0x76);

  /* Default settings from datasheet. */
  bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */

}

void loop() {
  // Sensor Temperatura
  sensorValue = analogRead(A0);
  volts = (sensorValue + 1.1)/ 1023.0;
  celsius = 100.0 * volts - 50.0;
  Serial.print(celsius);
  Serial.println(" C, ");
  Serial.print(volts);
  Serial.println(" V ");


  // Sensor Umidade
  float umidade = dht.readHumidity();
  Serial.print("Umidade Relativa (%): ");
  Serial.println(umidade);


  // Sensor Luminosidade
  sensorValue2 = analogRead(A1); // Lê valor binário
  tensao = (sensorValue2 / 1023.0) * 1.1; // Conver em tensão
  res = (tensao * 51000.0) / (3.3 - tensao); // Resis. LDR
  lum = pow(10, 6.05 - 1.03 * log10(res)); // Converte em luminosidade
  Serial.print("Luminosidade [Lux]: ");
  Serial.println(lum); // Exibe luminosidade

  // Sensor de pressao

  Serial.print(F("Pressure = "));
  float pressao = bmp.readPressure();
  Serial.print(pressao);
  Serial.println(" Pa");

  Serial.print(F("Approx altitude = "));
  float altitude = bmp.readAltitude(1013.25);
  Serial.print(altitude); /* Adjusted to local forecast! */
  Serial.println(" m");

  Serial.println();

  // Display:

  lcd.clear();

  lcd.setCursor(0, 0);
  lcd.print("Temp:");
  lcd.setCursor(6, 0);
  lcd.print(celsius);
  lcd.setCursor(14,0);
  lcd.print("oC");
  lcd.setCursor(0, 1);
  lcd.print("Umid:");
  lcd.setCursor(6, 1);
  lcd.print(umidade);
  lcd.setCursor(15,1);
  lcd.print("%");

  delay(3000);

  lcd.clear();

  lcd.setCursor(0, 0);
  lcd.print("Luminosidade:");
  lcd.setCursor(0, 1);
  lcd.print(lum);
  lcd.setCursor(13, 1);
  lcd.print("Lux");

  delay(3000);

  lcd.clear();

  lcd.setCursor(0, 0);
  lcd.print("Pressao:");
  lcd.setCursor(0, 1);
  lcd.print(pressao);
  lcd.setCursor(14, 1);
  lcd.print("Pa");

  delay(3000);

  lcd.clear();

  lcd.setCursor(0, 0);
  lcd.print("Altitude:");
  lcd.setCursor(0, 1);
  lcd.print(altitude);
  lcd.setCursor(15, 1);
  lcd.print("m");

  delay(3000);
}
